<!--
 * This file is part of XRL, a simple XML-RPC Library for PHP.
 *
 * Copyright (c) 2012, XRL Team. All rights reserved.
 * XRL is licensed under the 3-clause BSD License.
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
-->
<grammar xmlns="http://relaxng.org/ns/structure/1.0"
    xmlns:doc="http://www.example.com/annotation"
    datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes">

    <start>
        <ref name="types"/>
    </start>

    <define name="types">
        <choice>
            <ref name="nil"/>
            <ref name="int"/>
            <ref name="boolean"/>
            <ref name="string"/>
            <ref name="double"/>
            <ref name="dateTime"/>
            <ref name="base64"/>
            <ref name="struct"/>
            <ref name="array"/>
            <ref name="namespaced"/>
            <text/>
        </choice>
    </define>

    <define name="nil">
        <choice>
            <element name="nil">
                <empty/>
            </element>
        </choice>
    </define>

    <define name="int">
        <choice>
            <element name="int">
                <data type="int"/>
            </element>

            <element name="i4">
                <data type="int"/>
            </element>

            <element name="i8">
                <data type="long"/>
            </element>
        </choice>
    </define>

    <define name="boolean">
        <element name="boolean">
            <choice>
                <value>0</value>
                <value>1</value>
            </choice>
        </element>
    </define>

    <define name="string">
        <element name="string">
            <data type="string"/>
        </element>
    </define>

    <define name="double">
        <element name="double">
            <data type="string">
                <param name="pattern">(\+|-)?([0-9]+(\.[0-9]*)?|\.[0-9]+)</param>
            </data>
        </element>
    </define>

    <define name="dateTime">
        <choice>
            <element name="dateTime.iso8601">
                <!--
                    Despite also being based on ISO 8601, this is not the same
                    as XSD's "dateTime" type, which uses dashes as a separator
                    for years/months/days and adds restrictions on valid years.
                -->
                <data type="string">
                    <param name="pattern">-?([0-9]{4})(0[1-9]|1[0-2])(0[1-9]|[12][0-9]|3[01])T(([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9])</param>
                </data>
            </element>

            <element name="dateTime">
                <data type="dateTime"/>
            </element>
        </choice>
    </define>

    <define name="base64">
        <element name="base64">
            <data type="base64Binary"/>
        </element>
    </define>

    <define name="struct">
        <element name="struct">
            <zeroOrMore>
                <element name="member">
                    <element name="name">
                        <data type="string"/>
                    </element>

                    <element name="value">
                        <ref name="types"/>
                    </element>
                </element>
            </zeroOrMore>
        </element>
    </define>

    <define name="array">
        <element name="array">
            <element name="data">
                <zeroOrMore>
                    <element name="value">
                        <ref name="types"/>
                    </element>
                </zeroOrMore>
            </element>
        </element>
    </define>

    <define name="namespaced">
        <doc:comment>
            Any element that is contained inside a namespace.
            That element may use any namespaced attribute
            and may contain any element/attribute (including
            non-namespaced ones) in its subtree.
        </doc:comment>

        <element>
            <anyName>
                <except>
                    <nsName ns=""/>
                </except>
            </anyName>

            <zeroOrMore>
                <choice>
                    <attribute>
                        <anyName>
                            <except>
                                <nsName ns=""/>
                            </except>
                        </anyName>
                    </attribute>
                    <text/>
                    <ref name="anyElement"/>
                </choice>
            </zeroOrMore>
        </element>
    </define>

    <define name="anyElement">
        <element>
            <anyName/>
            <zeroOrMore>
                <choice>
                    <attribute>
                        <anyName/>
                    </attribute>
                    <text/>
                    <ref name="anyElement"/>
                </choice>
          </zeroOrMore>
      </element>
    </define>
</grammar>

